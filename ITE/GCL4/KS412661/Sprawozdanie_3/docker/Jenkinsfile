pipeline {
    agent any
    parameters {
        string(
            name: "VERSION",
            defaultValue: "1.0.1",
            description: "Podaj numer wersji"
        )
        string(
            name: "PASSWORD",
            defaultValue: "123",
            description: "Podaj has≈Ço"
        )
    }
    stages { 
        stage('Prepare') {
            steps {
                echo 'Prepare stage'
                sh "rm -rf MDO2024_INO"
                sh "docker system prune --all --force"
                sh "git clone https://github.com/InzynieriaOprogramowaniaAGH/MDO2024_INO"
                sh "pwd"
                sh "ls -la"
                dir('MDO2024_INO'){
                    sh "git checkout KS412661"
                }
                
                sh 'touch build_logs.log'
                sh 'touch test_logs.log'
            }
        }
        stage('Build') {
            steps {
                echo 'Build stage'
                dir('MDO2024_INO'){
                    sh 'ls -a'
                    sh 'docker build -t build:latest -f ./ITE/GCL4/KS412661/Sprawozdanie_3/docker/build.Dockerfile .| tee build_logs.log'
                    sh 'docker run --name build build:latest'
                }
            }
        }
        stage('Tests') {
            steps {
                echo 'Test stage'
                dir('MDO2024_INO'){
                    sh 'ls -la'
                    sh 'docker build -t test:latest -f ./ITE/GCL4/KS412661/Sprawozdanie_3/docker/test.Dockerfile . | tee test_logs.log'
                    sh 'docker run --name test test:latest'
                }
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deployment stage'
                dir('MDO2024_INO'){
                    sh 'ls -la'
                    sh 'docker rm build'
                    sh 'docker rm test'
                    archiveArtifacts artifacts: "build_logs.log"
                    archiveArtifacts artifacts: "test_logs.log"
                }
                script {
                    sh "mkdir ${params.VERSION}"
                    sh "cd ${params.VERSION}"
                    sh 'docker run --name test test:latest'
                }
            }
        }

        stage('Publish') {
            steps {
                echo 'Publish stage'
                script {
                    sh 'echo "Pushing image to DockerHub"'
                    
                    sh "echo '${params.PASSWORD}' | docker login -u flafyking --password-stdin"
                    
                    sh "docker tag test:latest flafyking/node-js-dummy-test:${params.VERSION}"
                    
                    sh "docker push flafyking/node-js-dummy-test:${params.VERSION}"
                    
                    sh 'docker rm test'
                    
                    sh "tar -czvf node-js-dummy-test-${params.VERSION}.tar.gz ${params.VERSION}/"
                    echo 'Creating artifact...'
                    archiveArtifacts artifacts: "node-js-dummy-test-${params.VERSION}.tar.gz"
                }
            }
        }
    }

    post {
        always {
            sh 'docker logout'
        }
    }
}
