Aleksandra Opalska
##Sprawozdanie 2

CEL: Celem labolatorium było utworzenie Dockerfiles oraz konteneru jako definicji etapu.

# Wybór oprogramowania
Repozytorium, które wybrałam działało proprawnie oraz posiadało testy w repozytorium, które można było uruchomić, dlatego zdecydowałam się go użyć to labolatorium i pobrałam repozytorium z prostą grą "ciepło zimno"
https://github.com/anamika8/react-hot-cold/blob/main/README.md
- Sklonowanie repozytorium za pomocą komendy 
```bash
git clone https://github.com/anamika8/react-hot-cold.git
```
![ ](./img/1.png)

- Zainstalowałam potrzebne do uruchomienia pakiety takie jak npm 
```bash
sudo apt install npm
```
![ ](./img/2.png)

- Zbudowałam projekt (build)
```bash
sudo run-script build 
```
![ ](./img/2.png)

- Uruchomiłam grę 
```bash
npm start 
```
po uruchomieniu pokazało się takie okienko, sugerujące, że gra działa
![ ](./img/3.png)

- Przeprowadziłam testy jednostkowe, gdzie "a" sugeruje aby uruchomić wszystkie testy, były również możliwe inne opcje co widać na screen'ie
```bash
npm test a 
```
![ ](./img/5.png)

# Przeprowadzenie buildu w kontenerze

- Pobranie obrazu
```bash
sudo docker pull node
```
pobrane obrazy
![ ](./img/7.png)
- Uruchomienie kontenera w trybie interaktywnym oraz ponowne wykonanie wcześniejszych kroków, takich jak pobranie gita, sklonowanie repozytorium oraz instalacja zależności
```bash
sudo docker run -it node sh
#apt-get update
#apt-get install -y git
#git clone https://github.com/anamika8/react-hot-cold.git
#cd react-hot-cold
#npm i
#npm run-script build
```
![ ](./img/8.png)

- Uruchomienie testów 
```bash
npm test a
```
![ ](./img/9.png)

2. Stworzene dwóch plików Dockerfile
- Stworzenie pierwszego Dockerfile o treści
![ ](./img/10.png)
Plik ten buduje obraz kontenera Docker, który zawiera aplikację React Hot and Cold, instalując wszystkie zależności, budując aplikację i ustawiając odpowiedni katalog roboczy.

- Zbudowanie obrazu
```bash
sudo docker build -t app_build .
```
Wystąpił błąd dotyczący nieprawidłowych ustawień proxy w pliku konfiguracyjnym npm
![ ](./img/11.png)
Naprawienie błędu
![ ](./img/12.png)
Prawidłowe działanie
![ ](./img/13.png)

- Stworzenie drugiego pliku Dockerfile, który jest kontynuacją poprzedniego i buduje testy i jest o treści
 ```bash                                                                                                                                                                                                                         
FROM app_build:latest
RUN CI=TRUE npm test a
```
- Zbudowanie obrazu
 ```bash 
sudo docker build -t app_test -f Dockerfile2 .
```

- Zdefiniowanie kompozycji tworzącej dwie usługi:
![ ](./img/14.png)
Definuje ona dwie usługi kontenerów Docker: build (budowanie obrazu aplikacji) i test (wykonywanie testów w usłudze "test", która zależy od zakończenia budowy obrazu w usłudze build)
- Wdrożenie
 ```bash 
sudo docker-compose build
 ```
![ ](./img/15.png)

#Podsumowanie
Program nie nadaje się do publikacji, gdyż plik docker-composer bardziej skupia się na budowie obrazu i testowaniu. Natomiast jeżeli program miałby być publikowany jako 
kontener Docker, finalnym artefaktem byłby obraz kontenera. Nie byłoby konieczne oczyszczanie go z pozostałości po budowaniu, ponieważ obraz kontenera jest autonomicznym 
pakietem zawierającym wszystko, co jest potrzebne do uruchomienia aplikacji. Jeśli jednak należałoby opublikować aplikację w formie innego pakietu,
można by było rozważyć użycie narzędzi do konwersji obrazu kontenera na wybrany format pakietu. W tym celu dobrą opcją byłoby użycie dodatkowego kroku w procesie budowania,
który konwertuje obraz kontenera na wybrany format pakietu.
